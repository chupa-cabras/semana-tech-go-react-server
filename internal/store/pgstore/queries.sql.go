// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package pgstore

import (
	"context"

	"github.com/google/uuid"
)

const answerMessage = `-- name: AnswerMessage :one
UPDATE messages SET answered = true WHERE id = $1 RETURNING id, room_id, message, reaction_count, answered, created_at, updated_at
`

func (q *Queries) AnswerMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, answerMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (room_id, message) VALUES ($1, $2) RETURNING id, room_id, message, reaction_count, answered, created_at, updated_at
`

type CreateMessageParams struct {
	RoomID  uuid.UUID
	Message string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, createMessage, arg.RoomID, arg.Message)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (theme) VALUES ($1) RETURNING id, theme, created_at, updated_at
`

func (q *Queries) CreateRoom(ctx context.Context, theme string) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, theme)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Theme,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :one
DELETE FROM messages WHERE id = $1 RETURNING id, room_id, message, reaction_count, answered, created_at, updated_at
`

func (q *Queries) DeleteMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, deleteMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRoom = `-- name: DeleteRoom :one
DELETE FROM rooms WHERE id = $1 RETURNING id, theme, created_at, updated_at
`

func (q *Queries) DeleteRoom(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, deleteRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Theme,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAnsweredMessages = `-- name: GetAnsweredMessages :many
SELECT id, room_id, message, reaction_count, answered, created_at, updated_at FROM messages WHERE room_id = $1 AND answered = true
`

func (q *Queries) GetAnsweredMessages(ctx context.Context, roomID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getAnsweredMessages, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Message,
			&i.ReactionCount,
			&i.Answered,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessages = `-- name: GetMessages :many
SELECT id, room_id, message, reaction_count, answered, created_at, updated_at FROM messages WHERE room_id = $1
`

func (q *Queries) GetMessages(ctx context.Context, roomID uuid.UUID) ([]Message, error) {
	rows, err := q.db.Query(ctx, getMessages, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.RoomID,
			&i.Message,
			&i.ReactionCount,
			&i.Answered,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoom = `-- name: GetRoom :one
SELECT id, theme, created_at, updated_at FROM rooms WHERE id = $1
`

func (q *Queries) GetRoom(ctx context.Context, id uuid.UUID) (Room, error) {
	row := q.db.QueryRow(ctx, getRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Theme,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRooms = `-- name: GetRooms :many
SELECT id, theme, created_at, updated_at FROM rooms
`

func (q *Queries) GetRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.Query(ctx, getRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Theme,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unanswerMessage = `-- name: UnanswerMessage :one
UPDATE messages SET answered = false WHERE id = $1 RETURNING id, room_id, message, reaction_count, answered, created_at, updated_at
`

func (q *Queries) UnanswerMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRow(ctx, unanswerMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages SET message = $1 WHERE id = $2 RETURNING id, room_id, message, reaction_count, answered, created_at, updated_at
`

type UpdateMessageParams struct {
	Message string
	ID      uuid.UUID
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRow(ctx, updateMessage, arg.Message, arg.ID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.RoomID,
		&i.Message,
		&i.ReactionCount,
		&i.Answered,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms SET theme = $1 WHERE id = $2 RETURNING id, theme, created_at, updated_at
`

type UpdateRoomParams struct {
	Theme string
	ID    uuid.UUID
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, updateRoom, arg.Theme, arg.ID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Theme,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
